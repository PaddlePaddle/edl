# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import master_pb2 as master__pb2


class MasterStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.GetCluster = channel.unary_unary(
            '/master.Master/GetCluster',
            request_serializer=common__pb2.ClusterRequest.SerializeToString,
            response_deserializer=common__pb2.ClusterResponse.FromString, )
        self.AssignDataResource = channel.unary_unary(
            '/master.Master/AssignDataResource',
            request_serializer=master__pb2.DataSet.SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )
        self.NewEpoch = channel.unary_unary(
            '/master.Master/NewEpoch',
            request_serializer=master__pb2.NewEpochRequest.SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )
        self.GetSubDataSet = channel.unary_unary(
            '/master.Master/GetSubDataSet',
            request_serializer=master__pb2.SubDataSetRequest.SerializeToString,
            response_deserializer=master__pb2.SubDataSet.FromString, )
        self.ReportSubDataSetStatus = channel.unary_unary(
            '/master.Master/ReportSubDataSetStatus',
            request_serializer=master__pb2.ReportSubDataSetRequest.
            SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )


class MasterServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def GetCluster(self, request, context):
        """Cluster env
    user_client, computor  -> master
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignDataResource(self, request, context):
        """Tasks

    user_client -> Master
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewEpoch(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSubDataSet(self, request, context):
        """data_server - > master 
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportSubDataSetStatus(self, request, context):
        """executor -> master 
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetCluster': grpc.unary_unary_rpc_method_handler(
            servicer.GetCluster,
            request_deserializer=common__pb2.ClusterRequest.FromString,
            response_serializer=common__pb2.ClusterResponse.SerializeToString,
        ),
        'AssignDataResource': grpc.unary_unary_rpc_method_handler(
            servicer.AssignDataResource,
            request_deserializer=master__pb2.DataSet.FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
        'NewEpoch': grpc.unary_unary_rpc_method_handler(
            servicer.NewEpoch,
            request_deserializer=master__pb2.NewEpochRequest.FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
        'GetSubDataSet': grpc.unary_unary_rpc_method_handler(
            servicer.GetSubDataSet,
            request_deserializer=master__pb2.SubDataSetRequest.FromString,
            response_serializer=master__pb2.SubDataSet.SerializeToString, ),
        'ReportSubDataSetStatus': grpc.unary_unary_rpc_method_handler(
            servicer.ReportSubDataSetStatus,
            request_deserializer=master__pb2.ReportSubDataSetRequest.
            FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
    }
    generic_handler = grpc.method_handlers_generic_handler('master.Master',
                                                           rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))
