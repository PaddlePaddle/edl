# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import data_server_pb2 as data__server__pb2


class DataServerStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.AssignDataResource = channel.unary_unary(
            '/data_server.DataServer/AssignDataResource',
            request_serializer=common__pb2.DataSource.SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )
        self.NewEpoch = channel.unary_unary(
            '/data_server.DataServer/NewEpoch',
            request_serializer=data__server__pb2.EpochRequest.
            SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )
        self.GetMetaData = channel.unary_unary(
            '/data_server.DataServer/GetMetaData',
            request_serializer=data__server__pb2.MetaDataRequest.
            SerializeToString,
            response_deserializer=data__server__pb2.MetaDataResponse.
            FromString, )
        self.GetDataSource = channel.unary_unary(
            '/data_server.DataServer/GetDataSource',
            request_serializer=data__server__pb2.DataSourceRequest.
            SerializeToString,
            response_deserializer=common__pb2.DataSource.FromString, )
        self.ReportFilesMeta = channel.unary_unary(
            '/data_server.DataServer/ReportFilesMeta',
            request_serializer=common__pb2.FilesMeta.SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )


class DataServerServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def AssignDataResource(self, request, context):
        """job_server->data_server
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewEpoch(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetaData(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataSource(self, request, context):
        """data_reader - > data_server
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportFilesMeta(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AssignDataResource': grpc.unary_unary_rpc_method_handler(
            servicer.AssignDataResource,
            request_deserializer=common__pb2.DataSource.FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
        'NewEpoch': grpc.unary_unary_rpc_method_handler(
            servicer.NewEpoch,
            request_deserializer=data__server__pb2.EpochRequest.FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
        'GetMetaData': grpc.unary_unary_rpc_method_handler(
            servicer.GetMetaData,
            request_deserializer=data__server__pb2.MetaDataRequest.FromString,
            response_serializer=data__server__pb2.MetaDataResponse.
            SerializeToString, ),
        'GetDataSource': grpc.unary_unary_rpc_method_handler(
            servicer.GetDataSource,
            request_deserializer=data__server__pb2.DataSourceRequest.
            FromString,
            response_serializer=common__pb2.DataSource.SerializeToString, ),
        'ReportFilesMeta': grpc.unary_unary_rpc_method_handler(
            servicer.ReportFilesMeta,
            request_deserializer=common__pb2.FilesMeta.FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'data_server.DataServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))
