# Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import job_server_pb2 as job__server__pb2


class MasterStub(object):
    # missing associated documentation comment in .proto file
    pass

    def __init__(self, channel):
        """Constructor.

    Args:
      channel: A grpc.Channel.
    """
        self.GetCluster = channel.unary_unary(
            '/job_server.Master/GetCluster',
            request_serializer=job__server__pb2.ClusterRequest.
            SerializeToString,
            response_deserializer=job__server__pb2.ClusterResponse.FromString,
        )
        self.DistributeTask = channel.unary_unary(
            '/job_server.Master/DistributeTask',
            request_serializer=job__server__pb2.TasksRequest.SerializeToString,
            response_deserializer=job__server__pb2.TasksResponse.FromString, )
        self.ReportTaskStatus = channel.unary_unary(
            '/job_server.Master/ReportTaskStatus',
            request_serializer=job__server__pb2.TasksStatus.SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )
        self.GetTasksStatus = channel.unary_unary(
            '/job_server.Master/GetTasksStatus',
            request_serializer=common__pb2.TasksMeta.SerializeToString,
            response_deserializer=job__server__pb2.TasksStatusResponse.
            FromString, )
        self.GetTasksResult = channel.unary_unary(
            '/job_server.Master/GetTasksResult',
            request_serializer=common__pb2.TasksMeta.SerializeToString,
            response_deserializer=job__server__pb2.TasksResultResponse.
            FromString, )
        self.SetProgramDesc = channel.unary_unary(
            '/job_server.Master/SetProgramDesc',
            request_serializer=common__pb2.Program.SerializeToString,
            response_deserializer=common__pb2.RPCRet.FromString, )
        self.GetProgramDesc = channel.unary_unary(
            '/job_server.Master/GetProgramDesc',
            request_serializer=job__server__pb2.ProgramDescRequest.
            SerializeToString,
            response_deserializer=job__server__pb2.ProgramResponse.FromString,
        )


class MasterServicer(object):
    # missing associated documentation comment in .proto file
    pass

    def GetCluster(self, request, context):
        """Cluster env
    user_client, compute_server  -> master
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DistributeTask(self, request, context):
        """Tasks
    user_client -> Master
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReportTaskStatus(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTasksStatus(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTasksResult(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetProgramDesc(self, request, context):
        # missing associated documentation comment in .proto file
        pass
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProgramDesc(self, request, context):
        """compute_server -> master
    """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'GetCluster': grpc.unary_unary_rpc_method_handler(
            servicer.GetCluster,
            request_deserializer=job__server__pb2.ClusterRequest.FromString,
            response_serializer=job__server__pb2.ClusterResponse.
            SerializeToString, ),
        'DistributeTask': grpc.unary_unary_rpc_method_handler(
            servicer.DistributeTask,
            request_deserializer=job__server__pb2.TasksRequest.FromString,
            response_serializer=job__server__pb2.TasksResponse.
            SerializeToString, ),
        'ReportTaskStatus': grpc.unary_unary_rpc_method_handler(
            servicer.ReportTaskStatus,
            request_deserializer=job__server__pb2.TasksStatus.FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
        'GetTasksStatus': grpc.unary_unary_rpc_method_handler(
            servicer.GetTasksStatus,
            request_deserializer=common__pb2.TasksMeta.FromString,
            response_serializer=job__server__pb2.TasksStatusResponse.
            SerializeToString, ),
        'GetTasksResult': grpc.unary_unary_rpc_method_handler(
            servicer.GetTasksResult,
            request_deserializer=common__pb2.TasksMeta.FromString,
            response_serializer=job__server__pb2.TasksResultResponse.
            SerializeToString, ),
        'SetProgramDesc': grpc.unary_unary_rpc_method_handler(
            servicer.SetProgramDesc,
            request_deserializer=common__pb2.Program.FromString,
            response_serializer=common__pb2.RPCRet.SerializeToString, ),
        'GetProgramDesc': grpc.unary_unary_rpc_method_handler(
            servicer.GetProgramDesc,
            request_deserializer=job__server__pb2.ProgramDescRequest.
            FromString,
            response_serializer=job__server__pb2.ProgramResponse.
            SerializeToString, ),
    }
    generic_handler = grpc.method_handlers_generic_handler('job_server.Master',
                                                           rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))
