// Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless  by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
package master;

message Trainer {}

message POD { repeated Trainer trainers = 1; }

message Cluster {
  string job_flag = 1;
  repeated POD pods = 2;
}

message ClusterResponse {
  common.RPCRet ret = 1;
  Cluster cluster = 2;
}

message ClusterRequest { string job_id = 1; }

message TasksRequest {
  enum TaskMode {
    STEP_LIMIT = 0;
    TIME_LIMIT = 1;
  };
  TaskMode mode = 1;
  int32 batch_size = 2;
  int32 step_limit = 3;
  int32 time_limit = 4;
}

message TasksResponse {
  common.RPCRet ret = 1;
  common.TasksMeta tasks_meta = 2;
}

message TasksStatus { repeated common.TaskStatus status_list = 1; }

message TasksStatusResponse {
  common.RPCRet ret = 1;
  TasksStatus task_status = 2;
}

message TasksResultResponse {
  common.RPCRet ret = 1;
  repeated common.TaskResult results = 2;
}

message ProgramResponse {
  common.RPCRet ret = 1;
  common.Program program = 2;
}

message ProgramDescRequest {}

message MetaDataRequest {
  int32 batch_size = 1;
  int32 step_num = 2;
}

message DataReader {
  string data_reader = 1;    //  the location of data
  common.FilesMeta meta = 2; // records of files
}

message MetaDataResponse {
  common.RPCRet ret = 1;
  repeated DataReader readers = 2;
}

/*
message Checkpoint{
     string uid = 1;
     string path = 2;
}
*/

message EpochRequest { string epoch_no = 1; }

message DataSourceRequest {}

service Master {
  // Cluster env
  // user_client, compute_server  -> master
  rpc GetCluster(ClusterRequest) returns (ClusterResponse) {}

  // Tasks
  // user_client -> Master
  rpc DistributeTask(TasksRequest) returns (TasksResponse) {}
  rpc ReportTaskStatus(TasksStatus) returns (common.RPCRet) {}
  rpc GetTasksStatus(common.TasksMeta) returns (TasksStatusResponse) {}
  rpc GetTasksResult(common.TasksMeta) returns (TasksResultResponse) {}
  rpc SetProgramDesc(common.Program) returns (common.RPCRet) {}
  rpc AssignDataResource(common.DataSource) returns (common.RPCRet) {}
  rpc NewEpoch(EpochRequest) returns (common.RPCRet) {}
  rpc GetMetaData(MetaDataRequest) returns (MetaDataResponse) {}

  // compute_server -> master
  rpc GetProgramDesc(ProgramDescRequest) returns (ProgramResponse) {}

  // data_reader - > master
  rpc GetDataSource(DataSourceRequest) returns (common.DataSource) {}
  rpc ReportFilesMeta(common.FilesMeta) returns (common.RPCRet) {}

  /*
  rpc DistributeAutoTask(AutoTaskRequest) returns (AutoTaskResponse) {}
  rpc SaveCheckpoint() returns () {}
  rpc LoadCheckpoint() returns () {}
  */
}
