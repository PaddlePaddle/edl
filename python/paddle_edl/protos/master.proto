// Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless  by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
option go_package = ".;masterpb";
package master;

enum ProcStatus {
  INITIAL = 0;
  PART_PROCESSED = 1;
  PROCESSED = 2;
};

message SubDataSetRequest {}

message FileMeta {
  int64 idx_in_list = 1;
  string file_path = 2;
  // only no
  repeated common.RecordRange filted_records = 3;
}

message SubDataSetResponse {
  common.RPCRet ret = 1;
  repeated FileMeta metas = 2;
}

message DataServer {
  string pod_id = 1;
  int32 rank = 2;
  string endpoint = 3;
}

message TrainerRequest {
  string pod_id = 1;
  int32 rank = 2;
  string endpoint = 3;
}

message Chunk {
  DataServer data_server = 1;
  int64 idx_in_list = 2;
  string file_path = 3;
  repeated common.RecordRange records = 4;
}

message ChunksRequest { repeated Chunk chunks = 1; }

message TaskMeta {
  string task_id = 1;
  int32 epoch_no = 2;
  string Stage = 3;
  int32 batch_size = 4; // records's num
}

message Task {
  TaskMeta meta = 1;
  repeated Chunk chunks = 2;
}

message Tasks { repeated Task tasks = 1; }

message TaskRequest { TrainerRequest trainer = 1; }
message TaskResponse {
  common.RPCRet ret = 1;
  repeated Task tasks = 2;
}

message DataSet { string file_list = 1; }
message NewEpochRequest {}

message ChunksResponse {
  common.RPCRet ret = 1;
  repeated Chunk chunks = 2;
}

service Master {
  // Cluster env
  // user_client, computor  -> master
  rpc GetCluster(common.ClusterRequest) returns (common.ClusterResponse) {}

  // Tasks
  /* user_client -> Master*/
  rpc AddInitDataSet(DataSet) returns (common.RPCRet) {}
  rpc NewEpoch(NewEpochRequest) returns (common.RPCRet) {}

  /* data_server - > master */
  rpc GetSubDataSet(SubDataSetRequest) returns (SubDataSetResponse) {}
  rpc ReportChunks(ChunksRequest) returns (common.RPCRet) {}

  /* executor -> master */
  rpc GetTask(TaskRequest) returns (TaskResponse) {}
  rpc TaskFinished(Tasks) returns (common.RPCRet) {}
  rpc TaskErrored(Tasks) returns (common.RPCRet) {}
}
