// Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless  by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";
option go_package = ".;master";
package master;

enum ProcStatus {
  INITIAL = 0;
  PART_PROCESSED = 1;
  PROCESSED = 2;
};

/*
message RecordStatus {
  int64 record_no = 1;
  ProcStatus status = 2;
}
*/

message SubDataSetRequest {}

message FileMeta {
  int64 idx_in_list = 1;
  string file_path = 2;
  // only no
  repeated int64 filted_records = 3;
}

message SubDataSetResponse {
  common.RPCRet ret = 1;
  repeated FileMeta metas = 2;
}

message Chunk {
  string data_sever = 1;
  int64 idx_in_list = 2;
  string file_path = 3;
  // only no
  repeated int64 records = 4;
}

message Chunks { repeated Chunk chunks = 2; }

message DataSet { string file_list = 1; }
message NewEpochRequest {}
message ChunksRequest {}
message ChunksResponse {
  common.RPCRet ret = 1;
  Chunks chunks = 2;
}

service Master {
  // Cluster env
  // user_client, computor  -> master
  rpc GetCluster(common.ClusterRequest) returns (common.ClusterResponse) {}

  // Tasks
  /* user_client -> Master*/
  rpc AddInitDataSet(DataSet) returns (common.RPCRet) {}
  rpc NewEpoch(NewEpochRequest) returns (common.RPCRet) {}

  /* data_server - > master */
  rpc GetSubDataSet(SubDataSetRequest) returns (SubDataSetResponse) {}
  rpc ReportChunks(Chunks) returns (common.RPCRet) {}

  /* executor -> master */
  rpc GetChunks(ChunksRequest) returns (ChunksResponse) {}
  rpc ChunksFinished(Chunks) returns (common.RPCRet) {}
  rpc ChunksErrored(Chunks) returns (common.RPCRet) {}
}
