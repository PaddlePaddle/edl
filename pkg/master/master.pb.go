// Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless  by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: master.proto

package master

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ProcStatus int32

const (
	ProcStatus_INITIAL        ProcStatus = 0
	ProcStatus_PART_PROCESSED ProcStatus = 1
	ProcStatus_PROCESSED      ProcStatus = 2
)

// Enum value maps for ProcStatus.
var (
	ProcStatus_name = map[int32]string{
		0: "INITIAL",
		1: "PART_PROCESSED",
		2: "PROCESSED",
	}
	ProcStatus_value = map[string]int32{
		"INITIAL":        0,
		"PART_PROCESSED": 1,
		"PROCESSED":      2,
	}
)

func (x ProcStatus) Enum() *ProcStatus {
	p := new(ProcStatus)
	*p = x
	return p
}

func (x ProcStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_master_proto_enumTypes[0].Descriptor()
}

func (ProcStatus) Type() protoreflect.EnumType {
	return &file_master_proto_enumTypes[0]
}

func (x ProcStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcStatus.Descriptor instead.
func (ProcStatus) EnumDescriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{0}
}

type RecordStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordNo int64      `protobuf:"varint,1,opt,name=record_no,json=recordNo,proto3" json:"record_no,omitempty"`
	Status   ProcStatus `protobuf:"varint,2,opt,name=status,proto3,enum=master.ProcStatus" json:"status,omitempty"`
}

func (x *RecordStatus) Reset() {
	*x = RecordStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordStatus) ProtoMessage() {}

func (x *RecordStatus) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordStatus.ProtoReflect.Descriptor instead.
func (*RecordStatus) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{0}
}

func (x *RecordStatus) GetRecordNo() int64 {
	if x != nil {
		return x.RecordNo
	}
	return 0
}

func (x *RecordStatus) GetStatus() ProcStatus {
	if x != nil {
		return x.Status
	}
	return ProcStatus_INITIAL
}

type FileDataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataServer string          `protobuf:"bytes,1,opt,name=data_server,json=dataServer,proto3" json:"data_server,omitempty"`
	IdxInList  int64           `protobuf:"varint,2,opt,name=idx_in_list,json=idxInList,proto3" json:"idx_in_list,omitempty"`
	FilePath   string          `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileStatus ProcStatus      `protobuf:"varint,4,opt,name=file_status,json=fileStatus,proto3,enum=master.ProcStatus" json:"file_status,omitempty"`
	Record     []*RecordStatus `protobuf:"bytes,5,rep,name=record,proto3" json:"record,omitempty"`
}

func (x *FileDataSet) Reset() {
	*x = FileDataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDataSet) ProtoMessage() {}

func (x *FileDataSet) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDataSet.ProtoReflect.Descriptor instead.
func (*FileDataSet) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{1}
}

func (x *FileDataSet) GetDataServer() string {
	if x != nil {
		return x.DataServer
	}
	return ""
}

func (x *FileDataSet) GetIdxInList() int64 {
	if x != nil {
		return x.IdxInList
	}
	return 0
}

func (x *FileDataSet) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileDataSet) GetFileStatus() ProcStatus {
	if x != nil {
		return x.FileStatus
	}
	return ProcStatus_INITIAL
}

func (x *FileDataSet) GetRecord() []*RecordStatus {
	if x != nil {
		return x.Record
	}
	return nil
}

type SubDataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ret   *RPCRet        `protobuf:"bytes,1,opt,name=ret,proto3" json:"ret,omitempty"`
	Files []*FileDataSet `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *SubDataSet) Reset() {
	*x = SubDataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubDataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubDataSet) ProtoMessage() {}

func (x *SubDataSet) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubDataSet.ProtoReflect.Descriptor instead.
func (*SubDataSet) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{2}
}

func (x *SubDataSet) GetRet() *RPCRet {
	if x != nil {
		return x.Ret
	}
	return nil
}

func (x *SubDataSet) GetFiles() []*FileDataSet {
	if x != nil {
		return x.Files
	}
	return nil
}

type ReportSubDataSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*FileDataSet `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ReportSubDataSetRequest) Reset() {
	*x = ReportSubDataSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportSubDataSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportSubDataSetRequest) ProtoMessage() {}

func (x *ReportSubDataSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportSubDataSetRequest.ProtoReflect.Descriptor instead.
func (*ReportSubDataSetRequest) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{3}
}

func (x *ReportSubDataSetRequest) GetFiles() []*FileDataSet {
	if x != nil {
		return x.Files
	}
	return nil
}

type DataSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileList string `protobuf:"bytes,1,opt,name=file_list,json=fileList,proto3" json:"file_list,omitempty"`
}

func (x *DataSet) Reset() {
	*x = DataSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSet) ProtoMessage() {}

func (x *DataSet) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSet.ProtoReflect.Descriptor instead.
func (*DataSet) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{4}
}

func (x *DataSet) GetFileList() string {
	if x != nil {
		return x.FileList
	}
	return ""
}

type NewEpochRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NewEpochRequest) Reset() {
	*x = NewEpochRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewEpochRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewEpochRequest) ProtoMessage() {}

func (x *NewEpochRequest) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewEpochRequest.ProtoReflect.Descriptor instead.
func (*NewEpochRequest) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{5}
}

type SubDataSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubDataSetRequest) Reset() {
	*x = SubDataSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_master_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubDataSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubDataSetRequest) ProtoMessage() {}

func (x *SubDataSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_master_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubDataSetRequest.ProtoReflect.Descriptor instead.
func (*SubDataSetRequest) Descriptor() ([]byte, []int) {
	return file_master_proto_rawDescGZIP(), []int{6}
}

var File_master_proto protoreflect.FileDescriptor

var file_master_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4e,
	0x6f, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x01,
	0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0b, 0x69, 0x64, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x64, 0x78, 0x49, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x0b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x59,
	0x0a, 0x0a, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x03,
	0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x74, 0x52, 0x03, 0x72, 0x65, 0x74, 0x12, 0x29,
	0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x65, 0x74, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x44, 0x0a, 0x17, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x26, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2a,
	0x3c, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41,
	0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x32, 0xc8, 0x02,
	0x0a, 0x06, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x12, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x0f, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74,
	0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x74,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x17,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x52, 0x50, 0x43, 0x52, 0x65, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x16, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x52, 0x50, 0x43, 0x52, 0x65, 0x74, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x3b, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_master_proto_rawDescOnce sync.Once
	file_master_proto_rawDescData = file_master_proto_rawDesc
)

func file_master_proto_rawDescGZIP() []byte {
	file_master_proto_rawDescOnce.Do(func() {
		file_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_master_proto_rawDescData)
	})
	return file_master_proto_rawDescData
}

var file_master_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_master_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_master_proto_goTypes = []interface{}{
	(ProcStatus)(0),                 // 0: master.ProcStatus
	(*RecordStatus)(nil),            // 1: master.RecordStatus
	(*FileDataSet)(nil),             // 2: master.FileDataSet
	(*SubDataSet)(nil),              // 3: master.SubDataSet
	(*ReportSubDataSetRequest)(nil), // 4: master.ReportSubDataSetRequest
	(*DataSet)(nil),                 // 5: master.DataSet
	(*NewEpochRequest)(nil),         // 6: master.NewEpochRequest
	(*SubDataSetRequest)(nil),       // 7: master.SubDataSetRequest
	(*RPCRet)(nil),                  // 8: common.RPCRet
	(*ClusterRequest)(nil),          // 9: common.ClusterRequest
	(*ClusterResponse)(nil),         // 10: common.ClusterResponse
}
var file_master_proto_depIdxs = []int32{
	0,  // 0: master.RecordStatus.status:type_name -> master.ProcStatus
	0,  // 1: master.FileDataSet.file_status:type_name -> master.ProcStatus
	1,  // 2: master.FileDataSet.record:type_name -> master.RecordStatus
	8,  // 3: master.SubDataSet.ret:type_name -> common.RPCRet
	2,  // 4: master.SubDataSet.files:type_name -> master.FileDataSet
	2,  // 5: master.ReportSubDataSetRequest.files:type_name -> master.FileDataSet
	9,  // 6: master.Master.GetCluster:input_type -> common.ClusterRequest
	5,  // 7: master.Master.AssignDataResource:input_type -> master.DataSet
	6,  // 8: master.Master.NewEpoch:input_type -> master.NewEpochRequest
	7,  // 9: master.Master.GetSubDataSet:input_type -> master.SubDataSetRequest
	4,  // 10: master.Master.ReportSubDataSetStatus:input_type -> master.ReportSubDataSetRequest
	10, // 11: master.Master.GetCluster:output_type -> common.ClusterResponse
	8,  // 12: master.Master.AssignDataResource:output_type -> common.RPCRet
	8,  // 13: master.Master.NewEpoch:output_type -> common.RPCRet
	3,  // 14: master.Master.GetSubDataSet:output_type -> master.SubDataSet
	8,  // 15: master.Master.ReportSubDataSetStatus:output_type -> common.RPCRet
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_master_proto_init() }
func file_master_proto_init() {
	if File_master_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubDataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportSubDataSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewEpochRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_master_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubDataSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_master_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_master_proto_goTypes,
		DependencyIndexes: file_master_proto_depIdxs,
		EnumInfos:         file_master_proto_enumTypes,
		MessageInfos:      file_master_proto_msgTypes,
	}.Build()
	File_master_proto = out.File
	file_master_proto_rawDesc = nil
	file_master_proto_goTypes = nil
	file_master_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterClient interface {
	// Cluster env
	// user_client, computor  -> master
	GetCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
	// user_client -> Master
	AssignDataResource(ctx context.Context, in *DataSet, opts ...grpc.CallOption) (*RPCRet, error)
	NewEpoch(ctx context.Context, in *NewEpochRequest, opts ...grpc.CallOption) (*RPCRet, error)
	// data_server - > master
	GetSubDataSet(ctx context.Context, in *SubDataSetRequest, opts ...grpc.CallOption) (*SubDataSet, error)
	// executor -> master
	ReportSubDataSetStatus(ctx context.Context, in *ReportSubDataSetRequest, opts ...grpc.CallOption) (*RPCRet, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) GetCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/master.Master/GetCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) AssignDataResource(ctx context.Context, in *DataSet, opts ...grpc.CallOption) (*RPCRet, error) {
	out := new(RPCRet)
	err := c.cc.Invoke(ctx, "/master.Master/AssignDataResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) NewEpoch(ctx context.Context, in *NewEpochRequest, opts ...grpc.CallOption) (*RPCRet, error) {
	out := new(RPCRet)
	err := c.cc.Invoke(ctx, "/master.Master/NewEpoch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) GetSubDataSet(ctx context.Context, in *SubDataSetRequest, opts ...grpc.CallOption) (*SubDataSet, error) {
	out := new(SubDataSet)
	err := c.cc.Invoke(ctx, "/master.Master/GetSubDataSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) ReportSubDataSetStatus(ctx context.Context, in *ReportSubDataSetRequest, opts ...grpc.CallOption) (*RPCRet, error) {
	out := new(RPCRet)
	err := c.cc.Invoke(ctx, "/master.Master/ReportSubDataSetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
type MasterServer interface {
	// Cluster env
	// user_client, computor  -> master
	GetCluster(context.Context, *ClusterRequest) (*ClusterResponse, error)
	// user_client -> Master
	AssignDataResource(context.Context, *DataSet) (*RPCRet, error)
	NewEpoch(context.Context, *NewEpochRequest) (*RPCRet, error)
	// data_server - > master
	GetSubDataSet(context.Context, *SubDataSetRequest) (*SubDataSet, error)
	// executor -> master
	ReportSubDataSetStatus(context.Context, *ReportSubDataSetRequest) (*RPCRet, error)
}

// UnimplementedMasterServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (*UnimplementedMasterServer) GetCluster(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (*UnimplementedMasterServer) AssignDataResource(context.Context, *DataSet) (*RPCRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignDataResource not implemented")
}
func (*UnimplementedMasterServer) NewEpoch(context.Context, *NewEpochRequest) (*RPCRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewEpoch not implemented")
}
func (*UnimplementedMasterServer) GetSubDataSet(context.Context, *SubDataSetRequest) (*SubDataSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDataSet not implemented")
}
func (*UnimplementedMasterServer) ReportSubDataSetStatus(context.Context, *ReportSubDataSetRequest) (*RPCRet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportSubDataSetStatus not implemented")
}

func RegisterMasterServer(s *grpc.Server, srv MasterServer) {
	s.RegisterService(&_Master_serviceDesc, srv)
}

func _Master_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.Master/GetCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetCluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_AssignDataResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).AssignDataResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.Master/AssignDataResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).AssignDataResource(ctx, req.(*DataSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_NewEpoch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewEpochRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).NewEpoch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.Master/NewEpoch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).NewEpoch(ctx, req.(*NewEpochRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_GetSubDataSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubDataSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).GetSubDataSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.Master/GetSubDataSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).GetSubDataSet(ctx, req.(*SubDataSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_ReportSubDataSetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportSubDataSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).ReportSubDataSetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/master.Master/ReportSubDataSetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).ReportSubDataSetStatus(ctx, req.(*ReportSubDataSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Master_serviceDesc = grpc.ServiceDesc{
	ServiceName: "master.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCluster",
			Handler:    _Master_GetCluster_Handler,
		},
		{
			MethodName: "AssignDataResource",
			Handler:    _Master_AssignDataResource_Handler,
		},
		{
			MethodName: "NewEpoch",
			Handler:    _Master_NewEpoch_Handler,
		},
		{
			MethodName: "GetSubDataSet",
			Handler:    _Master_GetSubDataSet_Handler,
		},
		{
			MethodName: "ReportSubDataSetStatus",
			Handler:    _Master_ReportSubDataSetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}
